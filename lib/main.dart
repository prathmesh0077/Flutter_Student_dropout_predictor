import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'models/student_model.dart';
import 'screens/dashboard_screen.dart';
import 'utils/app_localizations.dart';
import 'package:flutter_localizations/flutter_localizations.dart';



// The main function is the starting point of the app.
Future<void> main() async {
  // Ensure that Flutter bindings are initialized before any Flutter code runs.
  WidgetsFlutterBinding.ensureInitialized();

  // Get the directory where the app can store files.
  final appDocumentDir = await getApplicationDocumentsDirectory();

  // Initialize Hive in that directory. This is where the student database will be stored.
  await Hive.initFlutter(appDocumentDir.path);

  // Register the Hive adapters that were generated by build_runner.
  // These tell Hive how to read and write the Student, WeeklySnapshot,
  // and RiskCategory objects.
  Hive.registerAdapter(StudentAdapter());
  Hive.registerAdapter(WeeklySnapshotAdapter());
  Hive.registerAdapter(RiskCategoryAdapter());

  // Open the Hive "boxes". A box is like a table in a traditional database.
  await Hive.openBox<Student>('students'); // Box to store all student objects
  await Hive.openBox('settings'); // Box for app settings like language

  // Run the main application widget.
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();

  // This allows any widget in the app to find and call the _changeLanguage method.
  static _MyAppState of(BuildContext context) =>
      context.findAncestorStateOfType<_MyAppState>()!;
}

class _MyAppState extends State<MyApp> {
  late Locale _locale;

  @override
  void initState() {
    super.initState();
    // When the app starts, load the saved language from settings.
    // Default to English ('en') if no language has been saved yet.
    final settingsBox = Hive.box('settings');
    String languageCode = settingsBox.get('language', defaultValue: 'en');
    _locale = Locale(languageCode);
  }

  void changeLanguage(Locale locale) {
    setState(() {
      _locale = locale;
    });
    // Save the newly selected language to the settings box so it persists
    // across app restarts.
    Hive.box('settings').put('language', locale.languageCode);
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Student Risk Tracker',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.indigo,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.indigo,
          foregroundColor: Colors.white,
        ),
      ),
      // --- Localization Setup ---
      locale: _locale,
      supportedLocales: const [
        Locale('en', ''), // English, no country code
        Locale('hi', ''), // Hindi, no country code
      ],
      localizationsDelegates: const [
         AppLocalizationsDelegate(),
    
      GlobalMaterialLocalizations.delegate,
      GlobalWidgetsLocalizations.delegate,
      GlobalCupertinoLocalizations.delegate,
      ],
      // This tells the app which locales are supported.
      localeResolutionCallback: (locale, supportedLocales) {
        for (var supportedLocale in supportedLocales) {
          if (supportedLocale.languageCode == locale?.languageCode) {
            return supportedLocale;
          }
        }
        // If the device's locale is not supported, default to English.
        return supportedLocales.first;
      },
      home: const DashboardScreen(),
    );
  }
}

